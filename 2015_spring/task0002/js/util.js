/**
 * Created by maxinchun on 2015/12/25.
 */

//判断arr是否是一个数组，返回一个bool值
function isArray(arr) {
    //return Array.isArray(arr);
    return Object.prototype.toString.call(arr) === '[object Array]';
}

//判断fn是否为一个函数，返回一个bool值
function isFunction(fn) {
    //return typeof fn === "function";
    return Object.prototype.toString.call(fn) === '[object Function]';
}

// 使用递归来实现一个深度克隆，可以复制一个目标对象，返回一个完整克隆
// 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、Object对象。不会包含函数、正则对象等。
function cloneObject(src) {
    var clone = src;

    // 对于Date String Boolean等引用类型的数据，需要考虑调用构造函数重新构造，直接赋值依然会有引用问题（不是真正的clone引用变量）

    //对于Date
    if (src instanceof Date) {
        clone = new Date(src.getDate());
    }

    //对于Object和Array的遍历，可以使用for in ,这样可以保证在Array对象上扩展的属性也可以正确复制
    //对于数组
    if (src instanceof Array) {
        clone = [];
        for (var key in src) {
            clone[key] = cloneObject(src[key]);
        }
    }

    //对于Object
    if (src instanceof Object) {
        clone = {};
        for (var key in src) {
            if (src.hasOwnProperty(key)) {  //忽略掉继承属性
                clone[key] = cloneObject(src[key]);
            }
        }
    }

    //对于数字 字符串 布尔 null undefined
    return clone;
}

// 测试用例：
var srcObj = {
    a: 1,
    b: {
        b1: ["hello", "hi"],
        b2: "JavaScript"
    }
};
var abObj = srcObj;
var tarObj = cloneObject(srcObj);

srcObj.a = 2;
srcObj.b.b1[0] = "Hello";

console.log(srcObj.a);
console.log(srcObj.b.b1[0]);

console.log(tarObj.a);
console.log(tarObj.b.b1[0]);


//对于数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重的数组
function uniqArray(arr) {
    var newArr = [];
    for (var i in arr) {
        if (newArr.indexOf(arr[i]) == -1) {
            newArr.push(arr[i]);
        }
    }
    return newArr;

}

// 使用示例：
var a = [1, 3, 5, 7, 5, 3];
var b = uniqArray(a);
console.log(b);

// 实现一个简单的trim函数，用于去除一个字符串，头部和尾部的空白字符
// 假定空白字符只有半角空格、Tab
// 练习通过循环，以及字符串的一些基本方法，分别扫描字符串str头部和尾部是否有连续的空白字符，并且删掉他们，最后返回一个完成去除的字符串
function simpleTrim(str) {
    var i;
    var j;
    for (i = 0; i < str.length; i++) { //从头开始遍历字符串
        if (str[i] != " " && str[i] != "\t") {//当字符不为空的时候
            break;
        }
    }

    for (j = str.length - 1; j >= 0; j--) { //从字符串尾部遍历
        if (str[j] != " " && str[j] != "\t") { //当字符不为空的时候
            break;
        }
    }

    return str.slice(i, j + 1);

}

// 对字符串头尾进行空格字符串的去除、包括全角半角空格、Tab等，返回一个字符串
// 尝试使用一行简洁的正则表达式完成该题目
function trim(str) {
    if (str.length != -1) {
        return str.replace(/^\s+|\s+$/g, '');
    }
}

// 使用示例
var str = ' hi!  ';
str = trim(str);
console.log(str);  //'hi!'

// 实现一个遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递
// 其中fn函数可以接受两个参数：item和index
function each(arr, fn) {
    for (var i in arr) {
        fn(arr[i], i);
    }
}

// 使用示例
var arr = ['java', 'c', 'php', 'html'];
function output(item, index) {
    console.log(index + ':' + item);
}

each(arr, output); // 0:java, 1:c, 2:php, 3:html


// 获取一个对象里面第一层元素的数量，返回一个整数
function getObjectLength(obj) {
    var length = 0;
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            length++;
        }
    }
    return length;
}

// 使用示例
var obj = {
    a: 1,
    b: 2,
    c: {
        c1: 3,
        c2: 4
    }
}
console.log(getObjectLength(obj));




